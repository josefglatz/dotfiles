# Loads `.env` file from a filename passed as an argument
loadenv() {
  while read line; do
    if [ "${line:0:1}" = '#' ]; then
      continue  # comments are ignored
    fi
    export $line > /dev/null
  done < "$1"
  echo 'Loaded!'
}
# Source ~/.functions_local (if file exists)
if [[ -f "$HOME/.functions_local" ]]; then
  source "$HOME/.functions_local"
fi
# Source ~/.dotfiles_local/.functions_local (if file exists)
if [[ -f "$DOTFILES_DIRECTORY_LOCAL/.functions_local" ]]; then
  source "$HOME/.functions_local"
fi
# Source files in ~/.dotfiles_local/functions (if folder exists)
if [[ -d "$DOTFILES_DIRECTORY_LOCAL/functions" ]]; then
  for file in "$(find $DOTFILES_DIRECTORY_LOCAL/functions -maxdepth 1 -name '*.zsh' -print -quit)"; do source $file; done
fi

# broot (brew) https://dystroy.org/broot/install-br/
# --------------------------------------------------
# Shell Function for broot -> br got via `broot --print-shell-function zsh`

# This script was automatically generated by the broot program
# More information can be found in https://github.com/Canop/broot
# This function starts broot and executes the command
# it produces, if any.
# It's needed because some shell commands, like `cd`,
# have no useful effect if executed in a subshell.
function br {
    f=$(mktemp)
    (
	set +e
	broot --outcmd "$f" "$@"
	code=$?
	if [ "$code" != 0 ]; then
	    rm -f "$f"
	    exit "$code"
	fi
    )
    code=$?
    if [ "$code" != 0 ]; then
	return "$code"
    fi
    d=$(<"$f")
    rm -f "$f"
    eval "$d"
}